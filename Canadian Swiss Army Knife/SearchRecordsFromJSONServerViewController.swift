//
//  SearchRecordsFromJSONServerViewController.swift
//  Canadian Swiss Army Knife
//
//  Created by Jin on 2022-12-10.
//

import UIKit

class SearchRecordsFromJSONServerViewController: UIViewController {
    
    private var records: [SearchRecord] = []
    private let urlSession = URLSession(configuration: URLSessionConfiguration.default)
    private let searchRecordsUrl = URLComponents(string: "https://jinshub.com/api/search/records")?.url
    
    @IBOutlet weak var searchRecordsView: UITableView!
    @IBOutlet weak var searchRecordsViewLoadingIndicator: UIActivityIndicatorView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        searchRecordsView.delegate = self
        searchRecordsView.dataSource = self
        
        searchRecordsViewLoadingIndicator.hidesWhenStopped = true
        
        if let url = searchRecordsUrl {
            let searchRecordsRequest = urlSession.dataTask(with: URLRequest(url: url)) {data, response, err in
                OperationQueue.main.addOperation {
                    self.searchRecordsViewLoadingIndicator.stopAnimating()
                }
                if let err = err {
                    print(err)
                    return
                }
                if let data = data {
                    do {
                        let searchRecordsResponseBody = try JSONDecoder().decode(SearchRecordsResponseBody.self, from: data)
                        OperationQueue.main.addOperation {
                            self.records = searchRecordsResponseBody.data.searchRecords
                            self.searchRecordsView.reloadData()
                        }
                    }
                    catch {
                        print(error)
                    }
                }
            }
            searchRecordsViewLoadingIndicator.startAnimating()
            searchRecordsRequest.resume()
        }
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        switch segue.identifier {
        case "SearchResultFromSearchRecordsFromJSONServer":
            if let selectedRow = sender as? Int,
               let searchResultVC = segue.destination as? SearchResultViewController
            {
                let record = records[selectedRow]
                searchResultVC.searchText = record.searchText
                searchResultVC.searchField = record.searchField
            }
        default:
            fatalError("Unexpected segue ID.")
        }
    }
    
    // Generated by https://app.quicktype.io
    private struct SearchRecordsResponseBody: Codable {
        let code: String
        let data: DataClass
    }
    private struct DataClass: Codable {
        let searchRecords: [SearchRecord]
    }
    private struct SearchRecord: Codable {
        let searchText, searchField: String
    }
    
}

extension SearchRecordsFromJSONServerViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        performSegue(withIdentifier: "SearchResultFromSearchRecordsFromJSONServer", sender: indexPath.row)
    }
}

extension SearchRecordsFromJSONServerViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return records.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "SearchRecordsFromJSONServer", for: indexPath)
        let record = records[indexPath.row]
        cell.textLabel?.text = record.searchText
        cell.detailTextLabel?.text = record.searchField
        return cell
    }
    
    
}
